using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.IO;
using System.Drawing;
using NativeExcel;

public partial class rpt_62200030 : System.Web.UI.Page
{
	private void BindSheet(IWorksheet sheet, DataTable dt){
		IRange range;

        //bind data to excel file
		int row = 5, cursor = 0, idx = 0, tt_cl = 38, start_merge=0, parent = 0, start = 5;
		string l_apt="", l_last_color="";
        
		if(dt.Rows.Count > 0){
			sheet.Cells[4, 1].Value 	= dt.Rows[0][36].ToString();
			for(int y = 0; y < dt.Rows.Count; y++){
			    row++;
				if (dt.Rows[y][1].ToString() != "" && dt.Rows[y][0].ToString() != ""){
					Color color1 = ColorTranslator.FromHtml("0xCCFFFF");
					Color color2 = ColorTranslator.FromHtml("0xFFFFCC");
						
					//set color row up and row down same data col room(apt)
					if(y == 0){ 
					   l_apt = dt.Rows[y][2].ToString();
					   sheet.Cells[row,1, row, 38].Interior.Color = color1;//Color.Blue;
					   l_last_color = "B";
					}
					else{
					   if(l_apt == dt.Rows[y][2].ToString()){
					       if(l_last_color == "B"){
							sheet.Cells[row,1, row, 38].Interior.Color = color1;//Color.Blue;
						   }
						   else{
							sheet.Cells[row,1, row, 38].Interior.Color = color2;//Color.Green;
							l_last_color = "G";
						   }						   
					   }
					   else{
						l_apt = dt.Rows[y][2].ToString();
						if(l_last_color == "B"){
							sheet.Cells[row,1, row, 38].Interior.Color = color2;//Color.Green;
							l_last_color = "G";
						   }
						   else{
							sheet.Cells[row,1, row, 38].Interior.Color = color1;//Color.Blue;
							l_last_color = "B";
						   }				
					   }
					}
					//end set color row up and row down same data col room(apt)
					//Colum 0
					sheet.Cells[row, 1].Font.Color = Color.Black;
					sheet.Cells[row, 1].Font.Name = "Tahoma";
					sheet.Cells[row, 1].WrapText = false;
					sheet.Cells[row, 1].Font.Size = 8;
					sheet.Cells[row, 1].VerticalAlignment = XlVAlign.xlVAlignCenter;
					sheet.Cells[row, 1].HorizontalAlignment = XlHAlign.xlHAlignCenter;
					sheet.Cells[row, 1].RowHeight = 15;
										
					for(int x = 0; x < tt_cl; x++){
						sheet.Cells[row, x+1].Font.Color = Color.Black;
						sheet.Cells[row, x+1].WrapText = false;
						sheet.Cells[row, x+1].Font.Name = "Tahoma";
						sheet.Cells[row, x+1].Font.Size = 8;
						sheet.Cells[row, x+1].VerticalAlignment = XlVAlign.xlVAlignCenter;
						sheet.Cells[row, x+1].HorizontalAlignment = XlHAlign.xlHAlignLeft;
						sheet.Cells[row, x+1].RowHeight = 15;
						
						switch(x){
						    case 0:
								sheet.Cells[row, x+1].Value = dt.Rows[y][x].ToString();
							break;
							case 1:
								sheet.Cells[row, x].Borders[XlBordersIndex.xlEdgeLeft].LineStyle = XlLineStyle.xlContinuous;
								sheet.Cells[row, x].Borders[XlBordersIndex.xlEdgeTop].LineStyle = XlLineStyle.xlDot;
								sheet.Cells[row, x+1].Borders[XlBordersIndex.xlEdgeLeft].LineStyle = XlLineStyle.xlDot;
								sheet.Cells[row, x+1].Borders[XlBordersIndex.xlEdgeTop].LineStyle = XlLineStyle.xlDot;
								sheet.Cells[row, x+1].Value = dt.Rows[y][x].ToString();
							break;
							case 2:
							case 3:
								sheet.Cells[row, x+1].Borders[XlBordersIndex.xlEdgeLeft].LineStyle = XlLineStyle.xlDot;
								sheet.Cells[row, x+1].Borders[XlBordersIndex.xlEdgeTop].LineStyle = XlLineStyle.xlDot;
								sheet.Cells[row, x+1].Value = dt.Rows[y][x].ToString();
								sheet.Cells[row, x+1].HorizontalAlignment = XlHAlign.xlHAlignCenter;
							break;
							case 36:
								sheet.Cells[row, x+1].Borders[XlBordersIndex.xlEdgeLeft].LineStyle = XlLineStyle.xlContinuous;
								sheet.Cells[row, x+1].Borders[XlBordersIndex.xlEdgeTop].LineStyle = XlLineStyle.xlDot;
								sheet.Cells[row, x+1].Formula = "=SUM($F"+row+":$AJ"+row+")";
								sheet.Cells[row, x+1].NumberFormat = "###,###,##0";
								sheet.Cells[row, x+1].HorizontalAlignment = XlHAlign.xlHAlignRight;
							break;
							case 37:
								sheet.Cells[row, x+1].Borders[XlBordersIndex.xlEdgeLeft].LineStyle = XlLineStyle.xlContinuous;
								sheet.Cells[row, x+1].Borders[XlBordersIndex.xlEdgeTop].LineStyle = XlLineStyle.xlDot;
								sheet.Cells[row, x+1].Borders[XlBordersIndex.xlEdgeRight].LineStyle = XlLineStyle.xlContinuous;
								sheet.Cells[row, x+1].Formula = "=SUM($F"+row+":$AJ"+row+")*$E"+row;
								sheet.Cells[row, x+1].NumberFormat = "###,###,##0";
								sheet.Cells[row, x+1].HorizontalAlignment = XlHAlign.xlHAlignRight;
							break;
							default:
								sheet.Cells[row, x+1].Borders[XlBordersIndex.xlEdgeLeft].LineStyle = XlLineStyle.xlDot;
								sheet.Cells[row, x+1].Borders[XlBordersIndex.xlEdgeTop].LineStyle = XlLineStyle.xlDot;
								if(dt.Rows[y][x].ToString() == ""){
									sheet.Cells[row, x+1].Value = dt.Rows[y][x].ToString();
								}
								else{
									sheet.Cells[row, x+1].Value = double.Parse(dt.Rows[y][x].ToString());
									sheet.Cells[row, x+1].NumberFormat = "###,###,##0";
									sheet.Cells[row, x+1].HorizontalAlignment = XlHAlign.xlHAlignRight;
								}
								
							break;
						}
					}
				} else if (dt.Rows[y][1].ToString() == "" && dt.Rows[y][0].ToString() == ""){
				    sheet.Cells[row, 2].Value 	= "Total";
					for(int x = 0; x < tt_cl; x++){
						sheet.Cells[row, x+1].Font.Color = Color.Black;
						sheet.Cells[row, x+1].WrapText = false;
						sheet.Cells[row, x+1].Font.Name = "Tahoma";
						sheet.Cells[row, x+1].Font.Size = 8;
						sheet.Cells[row, x+1].Font.Bold = true;
						sheet.Cells[row, x+1].VerticalAlignment = XlVAlign.xlVAlignCenter;
						sheet.Cells[row, x+1].HorizontalAlignment = XlHAlign.xlHAlignLeft;
						sheet.Cells[row, x+1].RowHeight = 15;
						switch(x){
							case 0:
								sheet.Cells[row, x+1].Borders[XlBordersIndex.xlEdgeTop].LineStyle = XlLineStyle.xlContinuous;
								sheet.Cells[row, x+1].Borders[XlBordersIndex.xlEdgeBottom].LineStyle = XlLineStyle.xlContinuous;
								sheet.Cells[row, x+1].Borders[XlBordersIndex.xlEdgeLeft].LineStyle = XlLineStyle.xlContinuous;
							break;
							case 1:
							case 2:
							case 3:
							case 4:
								sheet.Cells[row, x+1].Borders[XlBordersIndex.xlEdgeLeft].LineStyle = XlLineStyle.xlDot;
								sheet.Cells[row, x+1].Borders[XlBordersIndex.xlEdgeTop].LineStyle = XlLineStyle.xlContinuous;
								sheet.Cells[row, x+1].Borders[XlBordersIndex.xlEdgeBottom].LineStyle = XlLineStyle.xlContinuous;
							break;
							case 36:
								sheet.Cells[row, x+1].Borders[XlBordersIndex.xlEdgeLeft].LineStyle = XlLineStyle.xlContinuous;
								sheet.Cells[row, x+1].Borders[XlBordersIndex.xlEdgeTop].LineStyle = XlLineStyle.xlContinuous;
								sheet.Cells[row, x+1].Borders[XlBordersIndex.xlEdgeBottom].LineStyle = XlLineStyle.xlContinuous;
								sheet.Cells[row, x+1].Formula = "=SUM($F"+row+":$AJ"+row+")";
								sheet.Cells[row, x+1].NumberFormat = "###,###,##0";
								sheet.Cells[row, x+1].HorizontalAlignment = XlHAlign.xlHAlignRight;
							break;
							case 37:
								sheet.Cells[row, x+1].Borders[XlBordersIndex.xlEdgeLeft].LineStyle = XlLineStyle.xlContinuous;
								sheet.Cells[row, x+1].Borders[XlBordersIndex.xlEdgeRight].LineStyle = XlLineStyle.xlContinuous;
								sheet.Cells[row, x+1].Borders[XlBordersIndex.xlEdgeTop].LineStyle = XlLineStyle.xlContinuous;
								sheet.Cells[row, x+1].Borders[XlBordersIndex.xlEdgeBottom].LineStyle = XlLineStyle.xlContinuous;
								sheet.Cells[row, x+1].Formula = "=SUM($AL"+(start+1).ToString()+":$AL"+(row-1).ToString()+")";
								sheet.Cells[row, x+1].NumberFormat = "###,###,##0";
								sheet.Cells[row, x+1].HorizontalAlignment = XlHAlign.xlHAlignRight;
							break;
							default:
								sheet.Cells[row, x+1].Borders[XlBordersIndex.xlEdgeLeft].LineStyle = XlLineStyle.xlDot;
								sheet.Cells[row, x+1].Borders[XlBordersIndex.xlEdgeTop].LineStyle = XlLineStyle.xlContinuous;
								sheet.Cells[row, x+1].Borders[XlBordersIndex.xlEdgeBottom].LineStyle = XlLineStyle.xlContinuous;
								if(dt.Rows[y][x].ToString() == ""){
									sheet.Cells[row, x+1].Value = dt.Rows[y][x].ToString();
								}
								else{
									sheet.Cells[row, x+1].Value = double.Parse(dt.Rows[y][x].ToString());
									sheet.Cells[row, x+1].NumberFormat = "###,###,##0";
									sheet.Cells[row, x+1].HorizontalAlignment = XlHAlign.xlHAlignRight;
								}
							break;
						}
					}
				}
			}
		}

        // hide row firts 

        range = sheet.Range["A1"];
        // hide row A5 
        range.Rows.Hidden = true;
	}
	
    protected void Page_Load(object sender, EventArgs e)
    {

        ESysLib.SetUser("pms");

        string l_date = Request["p_fr"];

        string TemplateFile = "rpt_62200030.xls";
        string TempFile = "../../../system/temp/rpt_62200030_"+ Session["User_ID"].ToString() + ".xls";
        TemplateFile = Server.MapPath(TemplateFile);
        TempFile = Server.MapPath(TempFile);

        //Create a new workbook
        IWorkbook exBook = NativeExcel.Factory.OpenWorkbook(TemplateFile);

        //Add worksheet
        IWorksheet sheet = exBook.Worksheets[3];
		DataTable dt;
		string para = "";
        para = "'" + l_date + "','10'";
        dt = ESysLib.TableReadOpenCursor("pms.sp_rpt_62200030", para); 
		BindSheet(sheet, dt);
		
		sheet = exBook.Worksheets[2];
		para = "'" + l_date + "','20'";
        dt = ESysLib.TableReadOpenCursor("pms.sp_rpt_62200030", para); 
		BindSheet(sheet, dt);
		
		sheet = exBook.Worksheets[1];
		para = "'" + l_date + "','30'";
        dt = ESysLib.TableReadOpenCursor("pms.sp_rpt_62200030", para); 
		BindSheet(sheet, dt);
		
		// end loop detail percent
        if (File.Exists(TempFile))
        {
            File.Delete(TempFile);
        }

        // font bold header

        exBook.SaveAs(TempFile);
        //ESysLib.ExcelToPdf(TempFile);
        //string pdfFilePath = TempFile.Replace(".xls", ".pdf");
        //write out to client broswer
        System.IO.FileInfo file = new System.IO.FileInfo(TempFile);
        //System.IO.FileInfo file = new System.IO.FileInfo(pdfFilePath);
        Response.Clear();
        Response.Charset = "UTF-8";
        Response.ContentEncoding = System.Text.Encoding.UTF8;
        //Add header, give a default file name for "File Download/Store as"
        Response.AddHeader("Content-Disposition", "attachment; filename=" + Server.UrlEncode(file.Name));
        //Add header, set file size to enable browser display download progress
        Response.AddHeader("Content-Length", file.Length.ToString());
        //Set the return string is unavailable reading for client, and must be downloaded
        Response.ContentType = "application/ms-exSheet";
        //Response.ContentType = "application/pdf";
        //Send file string to client 
        Response.WriteFile(TempFile);
        //Response.WriteFile(pdfFilePath);
        //Stop execute  
        Response.End();

    }
}